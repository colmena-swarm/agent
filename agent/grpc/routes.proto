/*
 *  Copyright 2002-2024 Barcelona Supercomputing Center (www.bsc.es)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
option go_package = "./grpc";
option java_package = "es.bsc.colmena.app.routeguide";

service ColmenaPlatform {
  rpc Store(StorageRequest) returns (google.protobuf.Empty);
  rpc GetStored(GetStoredRequest) returns (GetStoredResponse);

  rpc Publish(StorageRequest) returns (google.protobuf.Empty);
  rpc Subscribe(GetStoredRequest) returns (stream GetStoredResponse);
  rpc GetSubscriptionItem(GetStoredRequest) returns (GetStoredResponse);

  rpc GetAllServices(google.protobuf.Empty) returns (stream ServiceDescription);
  rpc SubscribeToServiceChanges(google.protobuf.Empty) returns (stream ServiceDescription);
  rpc AddService(ServiceDescription) returns (google.protobuf.Empty);
  rpc RemoveService(ServiceDescriptionId) returns (google.protobuf.Empty);
}

message StorageRequest {
  string key = 1;
  bytes value = 2;
}

message MetricsStorageRequest {
  string key = 1;
  double value = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message GetStoredRequest {
  string key = 1;
}

message GetStoredResponse {
  bytes value = 1;
}

message CommunicationChannelsRequest {
  string key = 1;
}

message CommunicationChannelsResponse {
  string key = 1;
  repeated CommunicationChannel communicationChannels = 2;
  repeated ColmenaStorageCommunicationChannel colmenaStorageCommunicationChannel = 3;
}

message CommunicationChannel {
  string host = 1;
  int32 port = 2;
}

//DCP brokered queue
message ColmenaStorageCommunicationChannel {
  string key = 1;
}

message RegisterCommunicationChannelRequest {
  string key = 1;
  string host = 2;
  int32 port = 3;
}

message ServiceDescriptionId {
  string value = 1;
}

message ServiceDescription {
  ServiceDescriptionId id = 1;
  repeated RoleDefinition roleDefinitions = 2;
  repeated DockerRoleDefinition dockerRoleDefinitions = 3;
  repeated Kpi kpis = 4;
}

message DockerRoleDefinition {
  string id = 1;
  string imageId = 2;
  repeated HardwareRequirement hardwareRequirements = 3;
  repeated Kpi kpis = 4;
}

message RoleDefinition {
  string id = 1;
  string className = 2;
  repeated HardwareRequirement hardwareRequirements = 3;
  repeated Kpi kpis = 4;
}

message Kpi {
  string value = 1;
}

enum ThresholdType {
  GREATER_THAN_OR_EQUAL_TO = 0;
  LESS_THAN = 1;
}

enum HardwareRequirement {
  CAMERA = 0;
  CPU = 1;
}

enum TimeUnit {
  SECONDS = 0;
  MINUTES = 1;
  HOURS = 2;
}
