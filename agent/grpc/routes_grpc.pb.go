/*
 *  Copyright 2002-2024 Barcelona Supercomputing Center (www.bsc.es)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc/routes.proto

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ColmenaPlatformClient is the client API for ColmenaPlatform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColmenaPlatformClient interface {
	Store(ctx context.Context, in *StorageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStored(ctx context.Context, in *GetStoredRequest, opts ...grpc.CallOption) (*GetStoredResponse, error)
	Publish(ctx context.Context, in *StorageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Subscribe(ctx context.Context, in *GetStoredRequest, opts ...grpc.CallOption) (ColmenaPlatform_SubscribeClient, error)
	GetSubscriptionItem(ctx context.Context, in *GetStoredRequest, opts ...grpc.CallOption) (*GetStoredResponse, error)
	GetAllServices(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ColmenaPlatform_GetAllServicesClient, error)
	SubscribeToServiceChanges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ColmenaPlatform_SubscribeToServiceChangesClient, error)
	AddService(ctx context.Context, in *ServiceDescription, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveService(ctx context.Context, in *ServiceDescriptionId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type colmenaPlatformClient struct {
	cc grpc.ClientConnInterface
}

func NewColmenaPlatformClient(cc grpc.ClientConnInterface) ColmenaPlatformClient {
	return &colmenaPlatformClient{cc}
}

func (c *colmenaPlatformClient) Store(ctx context.Context, in *StorageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ColmenaPlatform/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colmenaPlatformClient) GetStored(ctx context.Context, in *GetStoredRequest, opts ...grpc.CallOption) (*GetStoredResponse, error) {
	out := new(GetStoredResponse)
	err := c.cc.Invoke(ctx, "/ColmenaPlatform/GetStored", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colmenaPlatformClient) Publish(ctx context.Context, in *StorageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ColmenaPlatform/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colmenaPlatformClient) Subscribe(ctx context.Context, in *GetStoredRequest, opts ...grpc.CallOption) (ColmenaPlatform_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ColmenaPlatform_ServiceDesc.Streams[0], "/ColmenaPlatform/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &colmenaPlatformSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ColmenaPlatform_SubscribeClient interface {
	Recv() (*GetStoredResponse, error)
	grpc.ClientStream
}

type colmenaPlatformSubscribeClient struct {
	grpc.ClientStream
}

func (x *colmenaPlatformSubscribeClient) Recv() (*GetStoredResponse, error) {
	m := new(GetStoredResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *colmenaPlatformClient) GetSubscriptionItem(ctx context.Context, in *GetStoredRequest, opts ...grpc.CallOption) (*GetStoredResponse, error) {
	out := new(GetStoredResponse)
	err := c.cc.Invoke(ctx, "/ColmenaPlatform/GetSubscriptionItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colmenaPlatformClient) GetAllServices(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ColmenaPlatform_GetAllServicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ColmenaPlatform_ServiceDesc.Streams[1], "/ColmenaPlatform/GetAllServices", opts...)
	if err != nil {
		return nil, err
	}
	x := &colmenaPlatformGetAllServicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ColmenaPlatform_GetAllServicesClient interface {
	Recv() (*ServiceDescription, error)
	grpc.ClientStream
}

type colmenaPlatformGetAllServicesClient struct {
	grpc.ClientStream
}

func (x *colmenaPlatformGetAllServicesClient) Recv() (*ServiceDescription, error) {
	m := new(ServiceDescription)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *colmenaPlatformClient) SubscribeToServiceChanges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ColmenaPlatform_SubscribeToServiceChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ColmenaPlatform_ServiceDesc.Streams[2], "/ColmenaPlatform/SubscribeToServiceChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &colmenaPlatformSubscribeToServiceChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ColmenaPlatform_SubscribeToServiceChangesClient interface {
	Recv() (*ServiceDescription, error)
	grpc.ClientStream
}

type colmenaPlatformSubscribeToServiceChangesClient struct {
	grpc.ClientStream
}

func (x *colmenaPlatformSubscribeToServiceChangesClient) Recv() (*ServiceDescription, error) {
	m := new(ServiceDescription)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *colmenaPlatformClient) AddService(ctx context.Context, in *ServiceDescription, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ColmenaPlatform/AddService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colmenaPlatformClient) RemoveService(ctx context.Context, in *ServiceDescriptionId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ColmenaPlatform/RemoveService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColmenaPlatformServer is the server API for ColmenaPlatform service.
// All implementations must embed UnimplementedColmenaPlatformServer
// for forward compatibility
type ColmenaPlatformServer interface {
	Store(context.Context, *StorageRequest) (*empty.Empty, error)
	GetStored(context.Context, *GetStoredRequest) (*GetStoredResponse, error)
	Publish(context.Context, *StorageRequest) (*empty.Empty, error)
	Subscribe(*GetStoredRequest, ColmenaPlatform_SubscribeServer) error
	GetSubscriptionItem(context.Context, *GetStoredRequest) (*GetStoredResponse, error)
	GetAllServices(*empty.Empty, ColmenaPlatform_GetAllServicesServer) error
	SubscribeToServiceChanges(*empty.Empty, ColmenaPlatform_SubscribeToServiceChangesServer) error
	AddService(context.Context, *ServiceDescription) (*empty.Empty, error)
	RemoveService(context.Context, *ServiceDescriptionId) (*empty.Empty, error)
	mustEmbedUnimplementedColmenaPlatformServer()
}

// UnimplementedColmenaPlatformServer must be embedded to have forward compatible implementations.
type UnimplementedColmenaPlatformServer struct {
}

func (UnimplementedColmenaPlatformServer) Store(context.Context, *StorageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedColmenaPlatformServer) GetStored(context.Context, *GetStoredRequest) (*GetStoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStored not implemented")
}
func (UnimplementedColmenaPlatformServer) Publish(context.Context, *StorageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedColmenaPlatformServer) Subscribe(*GetStoredRequest, ColmenaPlatform_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedColmenaPlatformServer) GetSubscriptionItem(context.Context, *GetStoredRequest) (*GetStoredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionItem not implemented")
}
func (UnimplementedColmenaPlatformServer) GetAllServices(*empty.Empty, ColmenaPlatform_GetAllServicesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllServices not implemented")
}
func (UnimplementedColmenaPlatformServer) SubscribeToServiceChanges(*empty.Empty, ColmenaPlatform_SubscribeToServiceChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToServiceChanges not implemented")
}
func (UnimplementedColmenaPlatformServer) AddService(context.Context, *ServiceDescription) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddService not implemented")
}
func (UnimplementedColmenaPlatformServer) RemoveService(context.Context, *ServiceDescriptionId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveService not implemented")
}
func (UnimplementedColmenaPlatformServer) mustEmbedUnimplementedColmenaPlatformServer() {}

// UnsafeColmenaPlatformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColmenaPlatformServer will
// result in compilation errors.
type UnsafeColmenaPlatformServer interface {
	mustEmbedUnimplementedColmenaPlatformServer()
}

func RegisterColmenaPlatformServer(s grpc.ServiceRegistrar, srv ColmenaPlatformServer) {
	s.RegisterService(&ColmenaPlatform_ServiceDesc, srv)
}

func _ColmenaPlatform_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColmenaPlatformServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColmenaPlatform/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColmenaPlatformServer).Store(ctx, req.(*StorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColmenaPlatform_GetStored_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColmenaPlatformServer).GetStored(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColmenaPlatform/GetStored",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColmenaPlatformServer).GetStored(ctx, req.(*GetStoredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColmenaPlatform_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColmenaPlatformServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColmenaPlatform/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColmenaPlatformServer).Publish(ctx, req.(*StorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColmenaPlatform_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStoredRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ColmenaPlatformServer).Subscribe(m, &colmenaPlatformSubscribeServer{stream})
}

type ColmenaPlatform_SubscribeServer interface {
	Send(*GetStoredResponse) error
	grpc.ServerStream
}

type colmenaPlatformSubscribeServer struct {
	grpc.ServerStream
}

func (x *colmenaPlatformSubscribeServer) Send(m *GetStoredResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ColmenaPlatform_GetSubscriptionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColmenaPlatformServer).GetSubscriptionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColmenaPlatform/GetSubscriptionItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColmenaPlatformServer).GetSubscriptionItem(ctx, req.(*GetStoredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColmenaPlatform_GetAllServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ColmenaPlatformServer).GetAllServices(m, &colmenaPlatformGetAllServicesServer{stream})
}

type ColmenaPlatform_GetAllServicesServer interface {
	Send(*ServiceDescription) error
	grpc.ServerStream
}

type colmenaPlatformGetAllServicesServer struct {
	grpc.ServerStream
}

func (x *colmenaPlatformGetAllServicesServer) Send(m *ServiceDescription) error {
	return x.ServerStream.SendMsg(m)
}

func _ColmenaPlatform_SubscribeToServiceChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ColmenaPlatformServer).SubscribeToServiceChanges(m, &colmenaPlatformSubscribeToServiceChangesServer{stream})
}

type ColmenaPlatform_SubscribeToServiceChangesServer interface {
	Send(*ServiceDescription) error
	grpc.ServerStream
}

type colmenaPlatformSubscribeToServiceChangesServer struct {
	grpc.ServerStream
}

func (x *colmenaPlatformSubscribeToServiceChangesServer) Send(m *ServiceDescription) error {
	return x.ServerStream.SendMsg(m)
}

func _ColmenaPlatform_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColmenaPlatformServer).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColmenaPlatform/AddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColmenaPlatformServer).AddService(ctx, req.(*ServiceDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColmenaPlatform_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceDescriptionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColmenaPlatformServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ColmenaPlatform/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColmenaPlatformServer).RemoveService(ctx, req.(*ServiceDescriptionId))
	}
	return interceptor(ctx, in, info, handler)
}

// ColmenaPlatform_ServiceDesc is the grpc.ServiceDesc for ColmenaPlatform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ColmenaPlatform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ColmenaPlatform",
	HandlerType: (*ColmenaPlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _ColmenaPlatform_Store_Handler,
		},
		{
			MethodName: "GetStored",
			Handler:    _ColmenaPlatform_GetStored_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ColmenaPlatform_Publish_Handler,
		},
		{
			MethodName: "GetSubscriptionItem",
			Handler:    _ColmenaPlatform_GetSubscriptionItem_Handler,
		},
		{
			MethodName: "AddService",
			Handler:    _ColmenaPlatform_AddService_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _ColmenaPlatform_RemoveService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ColmenaPlatform_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllServices",
			Handler:       _ColmenaPlatform_GetAllServices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToServiceChanges",
			Handler:       _ColmenaPlatform_SubscribeToServiceChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/routes.proto",
}
